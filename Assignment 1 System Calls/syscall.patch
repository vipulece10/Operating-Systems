diff --git a/Makefile b/Makefile
index de1acaefe87e..d8cb9d9cbc21 100644
--- a/Makefile
+++ b/Makefile
@@ -1097,7 +1097,7 @@ export MODORDER := $(extmod-prefix)modules.order
 export MODULES_NSDEPS := $(extmod-prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+	core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index 78672124d28b..7e84a1841e20 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -343,6 +343,8 @@
 332	common	statx			sys_statx
 333	common	io_pgetevents		sys_io_pgetevents
 334	common	rseq			sys_rseq
+335     64      s2_encrypt              sys_s2_encrypt
+
 # don't use numbers 387 through 423, add new calls after the last
 # 'common' entry
 424	common	pidfd_send_signal	sys_pidfd_send_signal
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 7688bc983de5..93fd97f96f42 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1364,4 +1364,6 @@ int __sys_getsockopt(int fd, int level, int optname, char __user *optval,
 		int __user *optlen);
 int __sys_setsockopt(int fd, int level, int optname, char __user *optval,
 		int optlen);
+
+asmlinkage long sys_s2_encrypt(char __user *user_str,int key);
 #endif
diff --git a/kernel/Makefile b/kernel/Makefile
index aa7368c7eabf..8ebf81a897aa 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -10,7 +10,7 @@ obj-y     = fork.o exec_domain.o panic.o \
 	    extable.o params.o \
 	    kthread.o sys_ni.o nsproxy.o \
 	    notifier.o ksysfs.o cred.o reboot.o \
-	    async.o range.o smpboot.o ucount.o regset.o
+	    async.o range.o smpboot.o ucount.o regset.o s2_encrypt.o
 
 obj-$(CONFIG_USERMODE_DRIVER) += usermode_driver.o
 obj-$(CONFIG_MODULES) += kmod.o
diff --git a/kernel/s2_encrypt.c b/kernel/s2_encrypt.c
new file mode 100755
index 000000000000..cac84d1a5662
--- /dev/null
+++ b/kernel/s2_encrypt.c
@@ -0,0 +1,42 @@
+	#include <linux/slab.h>
+        #include <linux/kernel.h>
+        #include <linux/linkage.h>
+        #include <linux/syscalls.h>
+        #include <linux/uaccess.h>
+        
+        /* function to encrypt and print string to kernel */
+        /* syscall number 335 */
+        SYSCALL_DEFINE2(s2_encrypt,
+              char __user *, user_str,
+              int, key)
+        {
+	 int i;
+	 char *buf;
+	 unsigned long user_str_len;
+         buf=kmalloc(4096,GFP_KERNEL);
+         
+	 for(user_str_len=0;user_str[user_str_len]!='\0';++user_str_len);
+              
+         if( copy_from_user(buf, user_str, user_str_len+1)){
+                        return -EFAULT;
+         }
+
+        if(key<1 || key>5)
+                return -EINVAL;
+        
+        for(i=0;buf[i]!='\0';i++){
+            
+                buf[i]=(char)(buf[i] + key);
+
+        }
+
+        printk(" Encrypted String %s\n", buf);
+
+        if(copy_to_user(user_str,buf,user_str_len+1)){
+                return -EFAULT;
+        }
+
+        kfree(buf);
+
+        return 0;
+       }
diff --git a/net/socket.c b/net/socket.c
index 33e8b6c4e1d3..3cad6762ebf6 100644
--- a/net/socket.c
+++ b/net/socket.c
@@ -104,6 +104,7 @@
 #include <linux/sockios.h>
 #include <net/busy_poll.h>
 #include <linux/errqueue.h>
+#include <linux/printk.h>
 
 #ifdef CONFIG_NET_RX_BUSY_POLL
 unsigned int sysctl_net_busy_read __read_mostly;
@@ -1799,7 +1800,8 @@ SYSCALL_DEFINE4(accept4, int, fd, struct sockaddr __user *, upeer_sockaddr,
 
 SYSCALL_DEFINE3(accept, int, fd, struct sockaddr __user *, upeer_sockaddr,
 		int __user *, upeer_addrlen)
-{
+{   
+	printk("Hello from accept system call\n");
 	return __sys_accept4(fd, upeer_sockaddr, upeer_addrlen, 0);
 }
 
@@ -1859,6 +1861,7 @@ int __sys_connect(int fd, struct sockaddr __user *uservaddr, int addrlen)
 SYSCALL_DEFINE3(connect, int, fd, struct sockaddr __user *, uservaddr,
 		int, addrlen)
 {
+	printk("Hello from connect system call\n");
 	return __sys_connect(fd, uservaddr, addrlen);
 }
 
